import { ScopeSelection, DirectoryItem } from "scope-selection.slint";
import { FilterSettingsOptimized, FilterData, DateLimitType, RegexTarget } from "filter-settings-optimized.slint";
import { SearchPage } from "search-page.slint";
import { FileInfo } from "./search-result-view.slint";
import { AppSettings } from "app-settings.slint";

// 内容区域组件
export component ContentArea {
    in property<int> current_page: 0;
    in-out property<[DirectoryItem]> directories;
    in property<FilterData> saved_filter_data; // 从UIHandler传入的保存的过滤器设置
    callback add_directory();
    callback remove_selected();
    callback directory_toggled(int);
    callback filter_changed(FilterData);
    
    // 过滤设置数据
    property<FilterData> filter_data;
    
    // 搜索相关属性
    in-out property<[FileInfo]> search_results;
    in-out property<[string]> selected_paths;
    in-out property<int> selected_count: 0;
      // 搜索相关回调
    callback search_clicked();
    callback import_results();
    callback export_results();
    callback show_tree_view(); // 新增树状显示回调
    callback select_folder();
    callback move_selected_files(); // 新增移动选中文件回调
    callback copy_selected_files(); // 新增复制选中文件回调
    callback delete_selected_files();
    callback map_files();
    callback remove_duplicates();
    callback open_folder(string);
    
    // 搜索结果选择回调
    callback item_selected_changed(int, bool);
    callback select_all(bool);
    
    // 排序回调
    callback sort_results(string, bool);
    
    Rectangle {
        background: #f5f5f5;
        width: 100%;
        height: 100%;
        
        if current_page == 0: ScopeSelection {
            directories <=> root.directories;
            add_directory => { root.add_directory(); }
            remove_selected => { root.remove_selected(); }
            directory_toggled(index) => { root.directory_toggled(index); }
        }  

        if current_page == 1: filter_settings := FilterSettingsOptimized {
            // 从保存的设置中初始化
            search_hidden_files: root.saved_filter_data.search_hidden_files;
            search_hidden_folders: root.saved_filter_data.search_hidden_folders;
            search_readonly_files: root.saved_filter_data.search_readonly_files;
            min_file_size: root.saved_filter_data.min_file_size;
            max_file_size: root.saved_filter_data.max_file_size;
            date_limit_type: root.saved_filter_data.date_limit_type == DateLimitType.None ? 0 :
                           root.saved_filter_data.date_limit_type == DateLimitType.Days ? 1 :
                           root.saved_filter_data.date_limit_type == DateLimitType.Weeks ? 2 :
                           root.saved_filter_data.date_limit_type == DateLimitType.Years ? 3 : 4;
            date_limit_value: root.saved_filter_data.date_limit_value;
            specific_year: root.saved_filter_data.specific_year;
            specific_month: root.saved_filter_data.specific_month;
            specific_day: root.saved_filter_data.specific_day;
            regex_pattern: root.saved_filter_data.regex_pattern;
            regex_target: root.saved_filter_data.regex_target == RegexTarget.FileName ? 0 : 1;
            record_hash: root.saved_filter_data.record_hash;
            
            filter_changed => {
                root.filter_data = filter_settings.get_filter_data();
                root.filter_changed(root.filter_data);
            }
        }
            
        if current_page == 2: search_page := SearchPage {
            search_results <=> root.search_results;
            selected_paths <=> root.selected_paths;
            selected_count <=> root.selected_count;
            
            search_clicked => {
                root.search_clicked();
            }
            import_results => {
                root.import_results();
            }
            export_results => {
                root.export_results();
            }
            show_tree_view => {
                root.show_tree_view();
            }
            select_folder => {
                root.select_folder();
            }
            move_selected_files => {
                root.move_selected_files();
            }
            copy_selected_files => {
                root.copy_selected_files();
            }
            delete_selected_files => {
                root.delete_selected_files();
            }
            map_files => {
                root.map_files();
            }
            remove_duplicates => {
                root.remove_duplicates();
            }            open_folder(path) => {
                root.open_folder(path);
            }
            
            // 选择相关回调
            item_selected_changed(index, selected) => {
                root.item_selected_changed(index, selected);
            }
            
            select_all(selected) => {
                root.select_all(selected);
            }
        }


        if current_page == 4: AppSettings {
            sort_results(sort_type, sort_reversed) => {
                root.sort_results(sort_type, sort_reversed);
            }
        }
    }
}
