import { Button } from "std-widgets.slint";
import { CheckBox } from "std-widgets.slint";
import { LineEdit } from "std-widgets.slint";
import { ComboBox } from "std-widgets.slint";
import { SpinBox } from "std-widgets.slint";
import { ScrollView } from "std-widgets.slint";
import { GroupBox } from "std-widgets.slint";

// 文件大小单位枚举
export enum SizeUnit {
    Bytes,
    KB,
    MB,
    GB,
}

// 日期限制类型枚举
export enum DateLimitType {
    None,
    Days,
    Weeks,
    Years,
    Specific,
}

// 正则表达式匹配目标枚举
export enum RegexTarget {
    FileName,
    FilePath,
}

// 过滤条件数据结构
export struct FilterData {
    // 基本选项
    search_hidden_files: bool,
    search_hidden_folders: bool,
    search_readonly_files: bool,
    
    // 文件大小限制 (单位: MB)
    min_file_size: int,
    max_file_size: int,
    
    // 日期限制
    date_limit_type: DateLimitType,
    date_limit_value: int,  // 具体数值（天数/周数/年数）
    specific_year: int,
    specific_month: int,
    specific_day: int,
    
    // 正则表达式
    regex_pattern: string,
    regex_target: RegexTarget,
    
    // 特殊选项
    record_hash: bool,
}

// 过滤条件设置组件
export component FilterSettings {
    width: 90%;
    height: 90%;
    
    // 基本选项属性
    in-out property<bool> search_hidden_files: true;
    in-out property<bool> search_hidden_folders: true;
    in-out property<bool> search_readonly_files: true;
    
    // 文件大小限制属性
    in-out property<int> min_file_size: 0;
    in-out property<int> max_file_size: 65536; // 64MB
    
    // 日期限制属性
    in-out property<int> date_limit_type: 0; // 0=None, 1=Days, 2=Weeks, 3=Years, 4=Specific
    in-out property<int> date_limit_value: 1;
    in-out property<int> specific_year: 2024;
    in-out property<int> specific_month: 1;
    in-out property<int> specific_day: 1;
    
    // 正则表达式属性
    in-out property<string> regex_pattern: "";
    in-out property<int> regex_target: 0; // 0=FileName, 1=FilePath
    
    // 特殊选项属性
    in-out property<bool> record_hash: false;
    
    // 用于减少回调频率的内部状态
    property<bool> is_initializing: true;
    
    // 回调函数
    callback filter_changed();
    callback reset_to_defaults();
    
    // 延迟触发过滤器变化的函数
    function trigger_filter_changed() {
        if (!root.is_initializing) {
            root.filter_changed();
        }
    }
    
    // 获取过滤数据的方法
    public function get_filter_data() -> FilterData {
        return {
            search_hidden_files: root.search_hidden_files,
            search_hidden_folders: root.search_hidden_folders,
            search_readonly_files: root.search_readonly_files,
            min_file_size: root.min_file_size,
            max_file_size: root.max_file_size,
            date_limit_type: root.date_limit_type == 0 ? DateLimitType.None :
                           root.date_limit_type == 1 ? DateLimitType.Days :
                           root.date_limit_type == 2 ? DateLimitType.Weeks :
                           root.date_limit_type == 3 ? DateLimitType.Years : DateLimitType.Specific,
            date_limit_value: root.date_limit_value,
            specific_year: root.specific_year,
            specific_month: root.specific_month,
            specific_day: root.specific_day,
            regex_pattern: root.regex_pattern,
            regex_target: root.regex_target == 0 ? RegexTarget.FileName : RegexTarget.FilePath,
            record_hash: root.record_hash,
        };
    }    Rectangle {
        background: #ffffff;
        width: 100%;
        height: 100%;
        
        // 延迟设置初始化完成标志的定时器
        timer := Timer {
            interval: 100ms;
            running: true;
            triggered => {
                root.is_initializing = false;
                timer.running = false;
            }
        }
        
        ScrollView {
            width: 100%;
            height: 100%;
            
            VerticalLayout {
                padding: 20px;
                spacing: 15px;
                alignment: start;
                
                // 标题
                Text {
                    text: "设置过滤条件";
                    font-size: 20px;
                    font-weight: 700;
                    color: #333333;
                }
                
                // 基本选项组
                GroupBox {
                    title: "基本选项";
                    
                    VerticalLayout {
                        spacing: 10px;
                          hidden_files_checkbox := CheckBox {
                            text: "搜索隐藏文件";
                            checked <=> root.search_hidden_files;
                            toggled => {
                                root.trigger_filter_changed();
                            }
                        }
                        
                        hidden_folders_checkbox := CheckBox {
                            text: "搜索隐藏文件夹";
                            checked <=> root.search_hidden_folders;
                            toggled => {
                                root.trigger_filter_changed();
                            }
                        }
                        
                        readonly_files_checkbox := CheckBox {
                            text: "搜索只读文件";
                            checked <=> root.search_readonly_files;
                            toggled => {
                                root.trigger_filter_changed();
                            }
                        }
                    }
                }
                
                // 文件大小限制组
                GroupBox {
                    title: "文件大小限制 (MB)";
                    
                    HorizontalLayout {
                        spacing: 10px;
                        alignment: start;
                        
                        Text {
                            text: "最小大小:";
                            vertical-alignment: center;
                        }
                          min_size_spinbox := SpinBox {
                            value <=> root.min_file_size;
                            minimum: 0;
                            maximum: 1048576; // 1TB in MB
                            edited(value) => {
                                root.trigger_filter_changed();
                            }
                        }
                        
                        Text {
                            text: "MB";
                            vertical-alignment: center;
                        }
                        
                        Rectangle { width: 20px; }
                        
                        Text {
                            text: "最大大小:";
                            vertical-alignment: center;
                        }
                          max_size_spinbox := SpinBox {
                            value <=> root.max_file_size;
                            minimum: 0;
                            maximum: 1048576; // 1TB in MB
                            edited(value) => {
                                root.trigger_filter_changed();
                            }
                        }
                        
                        Text {
                            text: "MB";
                            vertical-alignment: center;
                        }
                    }
                }
                
                // 日期限制组
                GroupBox {
                    title: "最后修改日期限制";
                    
                    VerticalLayout {
                        spacing: 10px;
                        
                        HorizontalLayout {
                            spacing: 10px;
                            alignment: start;
                            
                            Text {
                                text: "限制类型:";
                                vertical-alignment: center;
                            }                            
                            date_limit_combo := ComboBox {
                                model: ["无限制", "天内", "周内", "年内", "具体日期"];
                                current-index: root.date_limit_type;
                                selected(index) => {
                                    if (index == 0) { root.date_limit_type = 0; }
                                    else if (index == 1) { root.date_limit_type = 1; }
                                    else if (index == 2) { root.date_limit_type = 2; }
                                    else if (index == 3) { root.date_limit_type = 3; }
                                    else { root.date_limit_type = 4; }
                                    root.trigger_filter_changed();
                                }
                            }
                        }
                        
                        if root.date_limit_type != 0 && root.date_limit_type != 4: HorizontalLayout {
                            spacing: 10px;
                            alignment: start;
                            
                            Text {
                                text: "数值:";
                                vertical-alignment: center;
                            }
                              date_value_spinbox := SpinBox {
                                value <=> root.date_limit_value;
                                minimum: 1;
                                maximum: 9999;
                                edited(value) => {
                                    root.trigger_filter_changed();
                                }
                            }
                            
                            Text {
                                text: root.date_limit_type == 1 ? "天" :
                                      root.date_limit_type == 2 ? "周" : "年";
                                vertical-alignment: center;
                            }
                        }
                        
                        if root.date_limit_type == 4: HorizontalLayout {
                            spacing: 10px;
                            alignment: start;
                            
                            Text {
                                text: "具体日期:";
                                vertical-alignment: center;
                            }
                              year_spinbox := SpinBox {
                                value <=> root.specific_year;
                                minimum: 1970;
                                maximum: 2100;
                                edited(value) => {
                                    root.trigger_filter_changed();
                                }
                            }
                            
                            Text {
                                text: "年";
                                vertical-alignment: center;
                            }
                              month_spinbox := SpinBox {
                                value <=> root.specific_month;
                                minimum: 1;
                                maximum: 12;
                                edited(value) => {
                                    root.trigger_filter_changed();
                                }
                            }
                            
                            Text {
                                text: "月";
                                vertical-alignment: center;
                            }
                              day_spinbox := SpinBox {
                                value <=> root.specific_day;
                                minimum: 1;
                                maximum: 31;
                                edited(value) => {
                                    root.trigger_filter_changed();
                                }
                            }
                            
                            Text {
                                text: "日";
                                vertical-alignment: center;
                            }
                        }
                    }
                }
                
                // 正则表达式组
                GroupBox {
                    title: "正则表达式过滤";
                    
                    VerticalLayout {
                        spacing: 10px;
                        
                        HorizontalLayout {
                            spacing: 10px;
                            alignment: start;
                            
                            Text {
                                text: "匹配目标:";
                                vertical-alignment: center;
                                width: 80px;
                            }                            regex_target_combo := ComboBox {
                                model: ["文件名", "文件路径"];
                                current-index: root.regex_target;                                selected(index) => {
                                    if (index == 0) { root.regex_target = 0; }
                                    else { root.regex_target = 1; }
                                    root.trigger_filter_changed();
                                }
                            }
                        }
                        
                        HorizontalLayout {
                            spacing: 10px;
                            alignment: stretch;
                            
                            Text {
                                text: "正则表达式:";
                                vertical-alignment: center;
                                width: 80px;
                            }
                              regex_input := LineEdit {
                                text <=> root.regex_pattern;
                                placeholder-text: "输入正则表达式 (留空表示不使用)";
                                edited(text) => {
                                    root.trigger_filter_changed();
                                }
                            }
                        }
                    }
                }
                
                // 特殊选项组
                GroupBox {
                    title: "特殊选项";
                    
                    VerticalLayout {
                        spacing: 10px;
                          hash_checkbox := CheckBox {
                            text: "搜索时记录文件哈希值 (用于去重功能)";
                            checked <=> root.record_hash;
                            toggled => {
                                root.trigger_filter_changed();
                            }
                        }
                    }
                }
                
                // 底部按钮区域
                HorizontalLayout {
                    spacing: 10px;
                    alignment: end;
                    
                    reset_button := Button {
                        text: "重置默认值";
                        clicked => {
                            root.search_hidden_files = true;
                            root.search_hidden_folders = true;
                            root.search_readonly_files = true;
                            root.min_file_size = 0;
                            root.max_file_size = 65536;
                            root.date_limit_type = 0;
                            root.date_limit_value = 1;
                            root.specific_year = 2024;
                            root.specific_month = 1;
                            root.specific_day = 1;
                            root.regex_pattern = "";
                            root.regex_target = 0;
                            root.record_hash = false;
                            root.reset_to_defaults();
                        }
                    }
                }
            }
        }
    }
}
